name: Build Hidden Source Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_wheels_linux:
    name: Build Linux wheels  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools build
      
      - name: Build extensions and create source-free wheel
        run: |
          # First build extensions normally
          python setup.py build_ext --inplace
          
          # Create a temporary setup.py that doesn't need source files
          cat > setup_binary_only.py << 'EOF'
          from setuptools import setup, find_packages
          
          setup(
              name="secretpackage",
              version="0.2.0",
              author="Your Name",
              author_email="your.email@example.com",
              description="A secret package with hidden source code",
              long_description=open("README.md").read(),
              long_description_content_type="text/markdown",
              url="https://github.com/guochen2011gc/secretpackage",
              packages=find_packages(),
              package_data={
                  'secretpackage': ['*.so', '*.pyd'],
              },
              include_package_data=True,
              python_requires=">=3.9",
              classifiers=[
                  "Programming Language :: Python :: 3",
                  "Programming Language :: Python :: 3.9",
                  "Programming Language :: Python :: 3.10",
                  "Programming Language :: Python :: 3.11",
                  "Programming Language :: Python :: 3.12",
                  "License :: OSI Approved :: MIT License",
                  "Operating System :: OS Independent",
              ],
              zip_safe=False,
          )
          EOF
          
          # Remove source .py files (except __init__.py)
          find secretpackage -name "*.py" ! -name "__init__.py" -delete
          
          # Build wheel with binary-only setup
          python setup_binary_only.py bdist_wheel
      
      - name: Rename wheel for PyPI compatibility
        run: |
          mkdir -p wheelhouse
          for wheel in dist/*-linux_x86_64.whl; do
            if [ -f "$wheel" ]; then
              newname=$(echo "$wheel" | sed 's/-linux_x86_64.whl/-manylinux_2_17_x86_64.whl/')
              newname=$(basename "$newname")
              cp "$wheel" "wheelhouse/$newname"
            fi
          done
      
      - name: Test wheel
        run: |
          pip install wheelhouse/*.whl
          python -c "import secretpackage; print('Linux test passed:', secretpackage.add(2, 3))"
          # Verify no source files except __init__.py
          python -c "import os; import secretpackage; path = os.path.dirname(secretpackage.__file__); files = os.listdir(path); py_files = [f for f in files if f.endswith('.py') and f != '__init__.py']; assert len(py_files) == 0, f'Found source files: {py_files}'"
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-${{ matrix.python-version }}
          path: wheelhouse/*.whl

  build_wheels_other:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools build
      
      - name: Build extensions and create source-free wheel
        run: |
          # First build extensions normally
          python setup.py build_ext --inplace
          
          # Create a temporary setup.py that doesn't need source files
          python -c "
          setup_content = '''
          from setuptools import setup, find_packages
          
          setup(
              name=\"secretpackage\",
              version=\"0.2.1\", 
              author=\"Your Name\",
              author_email=\"your.email@example.com\",
              description=\"A secret package with hidden source code\",
              long_description=open(\"README.md\").read(),
              long_description_content_type=\"text/markdown\",
              url=\"https://github.com/guochen2011gc/secretpackage\",
              packages=find_packages(),
              package_data={
                  \"secretpackage\": [\"*.so\", \"*.pyd\"],
              },
              include_package_data=True,
              python_requires=\">=3.9\",
              classifiers=[
                  \"Programming Language :: Python :: 3\",
                  \"Programming Language :: Python :: 3.9\",
                  \"Programming Language :: Python :: 3.10\",
                  \"Programming Language :: Python :: 3.11\",
                  \"Programming Language :: Python :: 3.12\",
                  \"License :: OSI Approved :: MIT License\",
                  \"Operating System :: OS Independent\",
              ],
              zip_safe=False,
          )
          '''
          with open('setup_binary_only.py', 'w') as f:
              f.write(setup_content)
          "
          
      - name: Remove source files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-ChildItem -Path secretpackage -Filter *.py -Recurse | 
            Where-Object { $_.Name -ne "__init__.py" } | 
            Remove-Item -Force
            
      - name: Remove source files (macOS)  
        if: runner.os == 'macOS'
        run: |
          find secretpackage -name "*.py" ! -name "__init__.py" -delete
      
      - name: Build wheel from compiled package
        run: |
          python setup_binary_only.py bdist_wheel
      
      - name: Test wheel
        run: |
          pip install dist/*.whl
          python -c "import secretpackage; print('Test passed on ${{ matrix.os }}:', secretpackage.add(2, 3))"
          python -c "import os; import secretpackage; path = os.path.dirname(secretpackage.__file__); files = os.listdir(path); py_files = [f for f in files if f.endswith('.py') and f != '__init__.py']; assert len(py_files) == 0, f'Found source files: {py_files}'"
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  upload_to_pypi:
    name: Upload to PyPI
    needs: [build_wheels_linux, build_wheels_other]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List files
        run: ls -la dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true