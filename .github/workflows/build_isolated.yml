name: Build Isolated Source-Free Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools build
      
      - name: Create isolated workspace
        run: |
          mkdir build_workspace
          # Copy all files except build_workspace directory to avoid infinite recursion
          find . -maxdepth 1 -not -name "." -not -name "build_workspace" -exec cp -r {} build_workspace/ \;
        shell: bash
          
      - name: Build extensions in isolation
        working-directory: build_workspace
        run: |
          # Build extensions normally
          python setup.py build_ext --inplace
        shell: bash
          
      - name: Remove source files (Linux/macOS)
        if: runner.os != 'Windows'  
        working-directory: build_workspace
        run: |
          find secretpackage -name "*.py" ! -name "__init__.py" -delete
        shell: bash
          
      - name: Remove source files (Windows)
        if: runner.os == 'Windows'
        working-directory: build_workspace
        run: |
          Get-ChildItem -Path secretpackage -Filter *.py -Recurse | Where-Object { $_.Name -ne "__init__.py" } | Remove-Item -Force
        shell: pwsh
          
      - name: Build wheel
        working-directory: build_workspace
        run: |
          python setup_binary.py bdist_wheel
        shell: bash
          
      - name: Prepare wheels for upload
        working-directory: build_workspace
        run: |
          mkdir -p wheelhouse
          ls -la dist/
          
          # For Linux, try to rename linux-specific wheels, otherwise copy all wheels
          if [ "$RUNNER_OS" = "Linux" ]; then
            renamed=false
            for wheel in dist/*-linux_x86_64.whl; do
              if [ -f "$wheel" ]; then
                newname=$(echo "$wheel" | sed 's/-linux_x86_64.whl/-manylinux_2_17_x86_64.whl/')
                newname=$(basename "$newname")
                cp "$wheel" "wheelhouse/$newname"
                echo "Renamed Linux wheel: $wheel -> wheelhouse/$newname"
                renamed=true
              fi
            done
            
            # If no linux-specific wheels found, copy all wheels
            if [ "$renamed" = "false" ]; then
              echo "No linux_x86_64 wheels found, copying all wheels"
              cp dist/*.whl wheelhouse/
            fi
          else
            # For Windows/macOS, just copy all wheels
            cp dist/*.whl wheelhouse/
          fi
          
          echo "Final wheelhouse contents:"
          ls -la wheelhouse/
        shell: bash
          
      - name: Test wheel
        working-directory: build_workspace
        run: |
          # Install from wheelhouse (should work for all platforms now)
          pip install wheelhouse/*.whl
          python -c "import secretpackage; print('Test passed on ${{ matrix.os }} Python ${{ matrix.python-version }}:', secretpackage.add(2, 3))"
          # Verify no source files
          python -c "import os; import secretpackage; path = os.path.dirname(secretpackage.__file__); files = os.listdir(path); py_files = [f for f in files if f.endswith('.py') and f != '__init__.py']; print(f'Source files found: {py_files}'); assert len(py_files) == 0, f'ERROR: Found source files: {py_files}'"
        shell: bash
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: build_workspace/wheelhouse/*.whl

  upload_to_pypi:
    name: Upload to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List files and verify wheels
        run: |
          echo "All downloaded files:"
          find dist -type f | sort
          echo ""
          echo "Wheel files only:"
          find dist -type f -name "*.whl" | sort
          echo ""
          echo "Checking wheel integrity:"
          for wheel in dist/*.whl; do
            if [ -f "$wheel" ]; then
              echo "Checking: $wheel"
              python -m zipfile -l "$wheel" | head -5 || echo "Failed to read $wheel"
            fi
          done
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true